// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="3")]
    pub to: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="5")]
    pub nonce: u64,
    /// uint256
    #[prost(string, tag="6")]
    pub gas_price: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub gas_limit: u64,
    #[prost(uint64, tag="8")]
    pub gas_used: u64,
    /// uint256
    #[prost(string, tag="9")]
    pub value: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="10")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub ordinal: u64,
    #[prost(bytes="vec", repeated, tag="3")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(oneof="log::Log", tags="10, 11, 12, 13, 14, 15")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Log {
        #[prost(message, tag="10")]
        TokenPurchase(super::TokenPurchase),
        #[prost(message, tag="11")]
        TrxPurchase(super::TrxPurchase),
        #[prost(message, tag="12")]
        AddLiquidity(super::AddLiquidity),
        #[prost(message, tag="13")]
        RemoveLiquidity(super::RemoveLiquidity),
        #[prost(message, tag="14")]
        Snapshot(super::Snapshot),
        #[prost(message, tag="15")]
        NewExchange(super::NewExchange),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPurchase {
    #[prost(bytes="vec", tag="1")]
    pub buyer: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub trx_sold: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub tokens_bought: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrxPurchase {
    #[prost(bytes="vec", tag="1")]
    pub buyer: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub tokens_sold: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub trx_bought: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddLiquidity {
    #[prost(bytes="vec", tag="1")]
    pub provider: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub trx_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub token_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveLiquidity {
    #[prost(bytes="vec", tag="1")]
    pub provider: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub trx_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub token_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Snapshot {
    #[prost(bytes="vec", tag="1")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub trx_balance: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub token_balance: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewExchange {
    #[prost(bytes="vec", tag="1")]
    pub exchange: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub token: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
