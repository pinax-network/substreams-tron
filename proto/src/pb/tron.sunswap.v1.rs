// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="3")]
    pub to: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="5")]
    pub nonce: u64,
    /// uint256
    #[prost(string, tag="6")]
    pub gas_price: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub gas_limit: u64,
    #[prost(uint64, tag="8")]
    pub gas_used: u64,
    /// uint256
    #[prost(string, tag="9")]
    pub value: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="10")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub ordinal: u64,
    #[prost(bytes="vec", repeated, tag="3")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(oneof="log::Log", tags="10, 11, 12, 13, 14")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Log {
        #[prost(message, tag="10")]
        Swap(super::Swap),
        #[prost(message, tag="11")]
        Mint(super::Mint),
        #[prost(message, tag="12")]
        Burn(super::Burn),
        #[prost(message, tag="13")]
        Sync(super::Sync),
        #[prost(message, tag="14")]
        PairCreated(super::PairCreated),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Swap {
    #[prost(bytes="vec", tag="1")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub amount0_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub amount1_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="4")]
    pub amount0_out: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="5")]
    pub amount1_out: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub to: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mint {
    #[prost(bytes="vec", tag="1")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub amount1: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Burn {
    #[prost(bytes="vec", tag="1")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="3")]
    pub amount1: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="4")]
    pub to: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sync {
    /// uint112
    #[prost(string, tag="1")]
    pub reserve0: ::prost::alloc::string::String,
    /// uint112
    #[prost(string, tag="2")]
    pub reserve1: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PairCreated {
    #[prost(bytes="vec", tag="1")]
    pub token0: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub token1: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub pair: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="4")]
    pub extra_data: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
