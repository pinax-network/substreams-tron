// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="3")]
    pub to: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="5")]
    pub nonce: u64,
    /// uint256
    #[prost(string, tag="6")]
    pub gas_price: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub gas_limit: u64,
    #[prost(uint64, tag="8")]
    pub gas_used: u64,
    /// uint256
    #[prost(string, tag="9")]
    pub value: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="10")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub ordinal: u64,
    #[prost(oneof="log::Log", tags="10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Log {
        #[prost(message, tag="10")]
        LaunchPending(super::LaunchPending),
        #[prost(message, tag="11")]
        LauncherChanged(super::LauncherChanged),
        #[prost(message, tag="12")]
        MinTxFeeSet(super::MinTxFeeSet),
        #[prost(message, tag="13")]
        MintFeeSet(super::MintFeeSet),
        #[prost(message, tag="14")]
        OperatorChanged(super::OperatorChanged),
        #[prost(message, tag="15")]
        OwnerChanged(super::OwnerChanged),
        #[prost(message, tag="16")]
        PendingOwnerSet(super::PendingOwnerSet),
        #[prost(message, tag="17")]
        PurchaseFeeSet(super::PurchaseFeeSet),
        #[prost(message, tag="18")]
        SaleFeeSet(super::SaleFeeSet),
        #[prost(message, tag="19")]
        TokenCreate(super::TokenCreate),
        #[prost(message, tag="20")]
        TokenLaunched(super::TokenLaunched),
        #[prost(message, tag="21")]
        TokenPurchased(super::TokenPurchased),
        #[prost(message, tag="22")]
        TokenSold(super::TokenSold),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LaunchPending {
    #[prost(bytes="vec", tag="1")]
    pub token: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LauncherChanged {
    #[prost(bytes="vec", tag="1")]
    pub old_launcher: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_launcher: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MinTxFeeSet {
    /// uint256
    #[prost(string, tag="1")]
    pub old_fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="2")]
    pub new_fee: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MintFeeSet {
    /// uint256
    #[prost(string, tag="1")]
    pub old_fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="2")]
    pub new_fee: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorChanged {
    #[prost(bytes="vec", tag="1")]
    pub old_operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_operator: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnerChanged {
    #[prost(bytes="vec", tag="1")]
    pub old_owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingOwnerSet {
    #[prost(bytes="vec", tag="1")]
    pub old_pending_owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_pending_owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurchaseFeeSet {
    /// uint256
    #[prost(string, tag="1")]
    pub old_fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="2")]
    pub new_fee: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaleFeeSet {
    /// uint256
    #[prost(string, tag="1")]
    pub old_fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="2")]
    pub new_fee: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenCreate {
    #[prost(bytes="vec", tag="1")]
    pub token_address: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub token_index: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="3")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenLaunched {
    #[prost(bytes="vec", tag="1")]
    pub token: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPurchased {
    #[prost(bytes="vec", tag="1")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub buyer: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="3")]
    pub trx_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="4")]
    pub fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="5")]
    pub token_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="6")]
    pub token_reserve: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenSold {
    #[prost(bytes="vec", tag="1")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub seller: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="3")]
    pub trx_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="4")]
    pub fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="5")]
    pub token_amount: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
